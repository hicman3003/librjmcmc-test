[section Quickstart]

This section details a simple example use of the __librjmcmc__ library. The goal is to find a set of circles
that minimizes a simple objective function. Each circle center lie in the  unit square and its radius is constrained
in a `[rmin, rmax]` interval. Notice that the cardinality of set itself is unknown.
The minimized function awards a negative constant value for each circle and penalizes every pair of overlaping circles by
its intersection area. Basically, it tries to pack as much circles as possible in the unit square while minimizing their overlap.
[import ../../samples/quickstart/quickstart.cpp]
First, one needs to define the object type of the __MPP__, with all its geometric methods
[objects]
Then, the object container is defined as well as an objective function as the sum of a unary term for each object and a binary term
for each pair of objects.
[objective_function]
The set of objects is then probabilized using a poisson process.
[reference_process]
A basic birth and death __RJMCMC__ sampler is then defined to enable the sampling of the __MPP__ relative to the poisson reference process,
modulated by the score of the objective function and a temperature parameter.
[rjmcmc_sampler]
This includes header files relative to the optimization of the objective function. A sufficiently slow temperature decrease morphs the
probability distribution function from the one of the reference process to a combination of dirac masses at the
global mimima of the objective function, thus achieving its minimization. A geometric scheduling of the temeprature decrease
is suboptimal but is more practical and thus more commonly used.
[simulated_annealing]
The main entry point starts by parsing the input parameters, providing default values:
[parse_parameters]
Once the reference poisson process is instantiated, an empty configuration is created and initialized with the energy objects.
Then,  the __RJMCMC__ sampler object `samp` is constructed. Finally, the `simulated_annealing` objects are created and the
optimization is performed in place on the `configuration` instance `c`.
[optimize]

[endsect]
